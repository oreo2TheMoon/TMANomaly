import torch.nn as nn
import torch
from torch.utils.data import Dataset, DataLoader


class MyDataSet(Dataset):
    def __init__(self, x, label):
        self.data = x
        self.label = label

    def __getitem__(self, item):
        return self.data[item], self.label[item]

    def __len__(self):
        return self.data.shape[0]


class RcSeq(nn.Module):
    def __init__(self, latent_space_dim: int,
                 hidden_units: int,
                 output_dim: int,
                 n_lstm_layers: int = 2):
        super(RcSeq, self).__init__()
        self.latent_space_dim = latent_space_dim
        self.hidden_units = hidden_units
        self.n_lstm_layers = n_lstm_layers
        self.output_dim = output_dim

        self.lstm = nn.LSTM(input_size=self.latent_space_dim,
                            hidden_size=self.hidden_units,
                            num_layers=self.n_lstm_layers,
                            batch_first=True,
                            dropout=.1)

        self.linear = nn.Linear(in_features=self.hidden_units,
                                out_features=self.output_dim)
        nn.init.trunc_normal_(self.linear.bias)
        nn.init.trunc_normal_(self.linear.weight)

    def forward(self, x):
        rnn_output, _ = self.lstm(x)
        return self.linear(rnn_output)


# data = torch.randn((64, 100, 30))
# model = RcSeq(30, 20, 30, )
# data = model(data)
# print(data.shape)


class RcSeqB(nn.Module):
    def __init__(self, latent_space_dim: int,
                 hidden_units: int,
                 output_dim: int,
                 n_lstm_layers: int = 2):
        super(RcSeqB, self).__init__()
        self.latent_space_dim = latent_space_dim
        self.hidden_units = hidden_units
        self.n_lstm_layers = n_lstm_layers
        self.output_dim = output_dim

        self.lstm = nn.LSTM(input_size=self.latent_space_dim,
                            hidden_size=self.hidden_units,
                            num_layers=self.n_lstm_layers,
                            batch_first=True,
                            dropout=.1)

        self.linear = nn.Linear(in_features=self.hidden_units,
                                out_features=self.output_dim)

        self.linear1 = nn.Linear(in_features=self.hidden_units,
                                 out_features=1)
        self.sig = nn.Sigmoid()
        self.tan = nn.Tanh()
        self.nl = nn.BatchNorm1d(30)

    def forward(self, x):
        rnn_output, _ = self.lstm(x)
        rec = self.tan(self.linear(rnn_output))
        c = self.sig(self.linear1(rnn_output))
        return rec, c
