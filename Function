import numpy as np
import pandas as pd
from sklearn.decomposition import PCA
from torch import nn


def get_normal_data(data, label):
    index = np.where(label == 0)
    normal_data = data[index]

    return normal_data


def pca(data, n):
    sample = data
    pca_a = PCA(n_components=n, svd_solver='full')
    pca_a.fit(sample)
    pc = pca_a.components_
    data = np.matmul(sample, pc.transpose(1, 0))
    return data

# dat = np.random.normal(0, 1, (100, 20))
# print(pca(dat, 10))


def load_data(path,  window_size=10, window_step=1, for_train=0, sub0=0, sub=0.8):
    DATA = np.array(pd.read_csv(path))
    l = int(DATA.shape[0] * sub)
    l0 = int(DATA.shape[0] * sub0)

    DATA = DATA[l0:l]
    print(DATA.shape)

    data = DATA[:, : -1]
    label = DATA[:, -1]
    data_ = data
    label_ = label
    if for_train == 1:
        data_ = get_normal_data(data_, label_)
        label_ = np.zeros((data.shape[0], 1))

    label_count = 0
    for j in range(label_.shape[0]):
        if label_[j] == 1:
            label_count += 1
    print(label_count, label_.shape[0]-label_count)

    length = data_.shape[0]
    w = data_.shape[1]
    new_length = (length-window_size) // window_step

    new_data = np.empty([new_length, window_size, w])
    new_label = np.empty([new_length, window_size, 1])

    for i in range(new_length):
        # new_label[i, :, :] = label_[i*window_step: (i*window_step + window_size)].reshape([-1, 1])
        # new_data[i, :, :] = data_[i*window_step: (i*window_step + window_size), :]

        new_label[i, :, :] = label_[i * window_step: (i * window_step + window_size)].reshape([-1, 1])
        new_data[i, :, :] = data_[i * window_step: (i * window_step + window_size), :]

    return new_data, new_label


# dat = np.random.randn(654, 100)
# lab = np.random.randint(2, size=654)
# dat, lab = load_data(dat, lab, 100, 1, 1)
# print(dat.shape, lab.shape)

def init_weights(layer):
    if type(layer) == nn.Conv2d:
        nn.init.normal_(layer.weight, mean=0, std=0.5)
    elif type(layer) == nn.Linear:
        nn.init.uniform_(layer.weight, a=-0.1, b=0.1)
        nn.init.constant_(layer.bias, 0.1)


